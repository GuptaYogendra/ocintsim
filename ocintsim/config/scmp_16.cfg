
# number of forwarded blocks (# of blocks in fast mode)
#blk_num_fastfwd           0 

# the maximum number of executed blocks (# of blocks in real mode)
#max_blk_num               1000 

# trips configuration
trips_conf                0

# perfect branch prediction
perf_bp                   1

# perfect memory disambiguation
perf_disamb               1

# lsq size
lsq_slots_per_tile       44

# reserved slots
lsq_reserved_slots        4

# LSQ replay filtering 
lsq_filter_replay         1 

# perfect opn
# If set to "1", we pay no routing latency (no partioning)
perf_opn                  0

# random instruction scheduling
# gurantee almost near perfect issue utilization (but, probably bad for latency)
#random_schedule           1

# perfect memory scheduling
# gurantee all memory accesses occur locally
perf_mem_schedule         0

# no load speculation (should always be turned on in perf_disamb mode)
no_ldspec                 1

# number of columns (number of tiles in x-axis)
total_num_x               4

# number of rows (number of tiles in y-axis)
total_num_y               4

# issue width per tile
tile_issue_width          1 

# number of read which can be issued per register tile 
tile_read_width           1 

# number of memory port per tile
tile_mport_width          1 



########## OPN related ##########

# model the cycle-accurate opn contention
opn_contention            1

# real dual opn implementation
dual_opn                  0

# pump up the opn banwidth OPTIMISTICALLY 
# 0: single opn (default)
# 2: dual opn (double the bandwidth)
# 3: triple opn (triple the bandwidth)
pump_opn_bw               0

# show the opn traffic log (for debugging)
show_opn_log              0

# hop latency between tiles
hop_latency               1

# opn inpuf fifo size
router_fifo_size          5 

# local input fifo size
local_input_fifo_size     5 

# local output fifo size
local_output_fifo_size    5 



########## BP related ##########
# branch prediction latency
bplat                     2

# 1: model latency for distributed branch prediction
# 0: model latency for centralized branch prediction
dist_bp                   1

# 1: use distributed control, 0: use centralized control   
dist_ctrl                 1



########## MEM related ##########

cluster_enable            0 

### 1. D-cache
# L1 associativity
dl1_assoc                 2

# L1 line size (B)
dl1_linesize              32 

# L1 capacity per tile (KB)
dl1_capacity_per_tile     8

# L1 latency
dl1_lat                   2


### 2. L2 cache
# L2 associativity
l2_assoc                  16

# L1 line size (B)
l2_linesize               64

# L2 capacity (KB)
l2_capacity               4096

# L2 latency 
dl2_lat                   15 


### 3. I-cache
# L1 icache header associativity 
il1_header_assoc               4

# L1 header cache line size (B)
il1_header_linesize            128

# L1 header cache capacity per tile (KB)
il1_header_capacity_per_tile   8

# L1 header cache latency
il1_header_lat                 3


# L1 icache body associativity 
il1_body_assoc                 4

# L1 body cache line size (B)
il1_body_linesize              64

# L1 body cache capacity per tile (KB)
il1_body_capacity_per_tile     4

# L1 body cache latency
il1_body_lat                   2


########## Funtional Unit latency ##########
# interger ALU latency
ialu_lat                  1

# interger ALU latency
imul_lat                  3 

# interger ALU latency
idiv_lat                  20 

# fp ALU latency
falu_lat                  2

# fp ALU latency
fmul_lat                  4 

# fp ALU latency
fdiv_lat                  24 

##########  Synthethic traffic setting  ##########
# simulate the opn only with the synthethic traffic 
# Both opn_contention and opnsim_only should be set to "1"
opnsim_only               0

# total number of generated requests (For synthethic traffic)
max_req_num               100000 

# average number of generated requests for 1000 cycles per tile (For synthethic traffic) 
fgen_rate                 500 

# the rate of returning credits per cycle (For synthethic traffic) 
cr_back_rate              100

# stop simulation with the max_req_num paramater
stop_sim_by_req_num       1

########## OCN (L2 cache network) related setting ##########

# use TRIPS OCN model
ocn_modeling          1

# simulate with ocn synthetic traffic 
ocnsim_only           0

# number of MTs in X axis (columns)
num_x_mts             2 

# number of MTs in Y axis (columns) 
num_y_mts             8 

# input fifo size in router
ocn_router_fifo_size  2

# input fifo size in L2 bank
l2bank_fifo_size      5

# input fifo size in processor 
proc_fifo_size        5

# input fifo size in sdc 
sdc_fifo_size         5

# max number of transactions
max_ocn_req_num           200 

# flit generation rate, number of average flit generate per 1000 flits
# every cycle per processor
ocn_fgen_rate             1000

# percentage of hit for all acceses
hit_rate                  0 

# number of sdc (1 or 2 or 4)
num_sdc                   2

# number of mshr entry per l2 bank
max_mshr_elem_per_l2bank  8 

# show ocn log messages 
show_ocn_log              1

# show body flit log messages 
show_body_flit_log        1

# l2 bank latency (latency when you get the first reply header) 
# the minimum latency is 2)
l2bank_latency        5

# memory access latency (latency when you get the first reply header) 
# the minimum latency is 2)
sdc_latency           100

# percentage of sdc clk freq over processor clk. This determins the
# maximum SDC bandwidth for example, when 2.6Ghz AMD operaton cpu
# integrates 667Mhz DDR2 memory controller sdc_clk_ratio(667Mhz is 25%
# of 2.6Ghz) is 25.  The maximum memory bandwidth would be 8.5GB/s per
# SDC (128bit * 667Mhz)
sdc_clk_ratio         50 

# hop latency between mtiles. The hop latency is sum of router latency
# and wire delay
ocn_hop_latency           1

# set to 1 when you want to stop simulation when the number of requests 
# reaches the Max. Otherwise, the simulation stops when cycles reach the Max
stop_ocnsim_by_req_num   0


# Gather router level statistics on contention:
#   stat_link_ut - link utilization
#   stat_output_cont - contention for each output port
#   stat_que_depth - average depth of que
#   stat_rtr_time - average cycles for flit to pass through router.

stat_link_ut                             0
stat_output_cont                         0
stat_que_depth                           0
stat_rtr_time                            0
slow_commit_delay                        0



# Parameters related to the Power Model
power_model_needed    0


# technology node being used
tech   130


# interconnect capacitance value
# TODO: Fix this value
# Write units : fF/uM (?)
interconn_cap_per_length 100

# leakage current per unit area
# 
leak_curr_per_area 100


# should cacti be used for finding optimal
# parameters
cacti_enable 0

# after how many cycles should the power counters be updated
power_counter_interval 1000

# processor frequency
freq  533000000

# voltage of the design
voltage 1.6

# should I override the values in the configuration file
# if yes, set this to 1
use_tech_defaults 0

########## Multi Programming Related ##########

# multi-programming enable 
os.tmorph_enabled  1

# enabled thread bit-mask (for example, 0x3f means there are total 6 threads)
# NOTE: Comment this out if disabling tmorph
os.tmorph_mask     0xffff

# NOTE: Comment this out if disabling tmorph
#os.task_copies     1

#Enables timer interrupts
os.timer_enabled   0

#Timer Interrupt Interval Value (units: cycles)
os.timer_interval  5000

#Enable dynamic process arrival.
#Tmorph should be enabled for dyn_process_arv_enabled to have meaning.
os.dyn_process_arv_enabled 	0

#Process Arrival Rate: number of processes arriving in a unit time interval. 
#The unit time interval is defined by os.arv_time_interval, which is specified
#in cycles.
os.process_arv_rate     1

os.arv_time_interval    15000000

#Maximum number of processes that are allowed to arrive. 
os.max_num_processes    128

#SMT Mode enable bit. Note that this takes effect only if tmorph_enabled is 1.
#os.smt_enabled     0

# redirect stdio into file
#os.redirect_stdio  0	

# Specify core ids to assign to each thread. Two formats are allowed:
# thread0_tile_ids {0,1,2,3} (Note: Do not leave a space between tokens) or
# thread0_tile_ids {0-3}

thread0_tile_ids {0-1}
thread1_tile_ids {2-3}
thread2_tile_ids {4-5}
thread3_tile_ids {6-7}
thread4_tile_ids {8-9}
thread5_tile_ids {10-11}
thread6_tile_ids {12-13}
thread7_tile_ids {14-15}
thread8_tile_ids {16-17}
thread9_tile_ids {18-19}
thread10_tile_ids {20-21}
thread11_tile_ids {22-23}
thread12_tile_ids {24-25}
thread13_tile_ids {26-27}
thread14_tile_ids {28-29}
thread15_tile_ids {30-31}
